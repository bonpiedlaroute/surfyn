/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "sf_services_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Sf_struct::~Sf_struct() throw() {
}


void Sf_struct::__set_url(const std::string& val) {
  this->url = val;
}

void Sf_struct::__set_property_type(const std::string& val) {
  this->property_type = val;
}

void Sf_struct::__set_price(const int32_t val) {
  this->price = val;
}

void Sf_struct::__set_nb_rooms(const int32_t val) {
  this->nb_rooms = val;
}

void Sf_struct::__set_description(const std::string& val) {
  this->description = val;
}

void Sf_struct::__set_images_path(const std::string& val) {
  this->images_path = val;
}

uint32_t Sf_struct::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->property_type);
          this->__isset.property_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nb_rooms);
          this->__isset.nb_rooms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->images_path);
          this->__isset.images_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Sf_struct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Sf_struct");

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("property_type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->property_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nb_rooms", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->nb_rooms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("images_path", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->images_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Sf_struct &a, Sf_struct &b) {
  using ::std::swap;
  swap(a.url, b.url);
  swap(a.property_type, b.property_type);
  swap(a.price, b.price);
  swap(a.nb_rooms, b.nb_rooms);
  swap(a.description, b.description);
  swap(a.images_path, b.images_path);
  swap(a.__isset, b.__isset);
}

Sf_struct::Sf_struct(const Sf_struct& other0) {
  url = other0.url;
  property_type = other0.property_type;
  price = other0.price;
  nb_rooms = other0.nb_rooms;
  description = other0.description;
  images_path = other0.images_path;
  __isset = other0.__isset;
}
Sf_struct& Sf_struct::operator=(const Sf_struct& other1) {
  url = other1.url;
  property_type = other1.property_type;
  price = other1.price;
  nb_rooms = other1.nb_rooms;
  description = other1.description;
  images_path = other1.images_path;
  __isset = other1.__isset;
  return *this;
}
void Sf_struct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Sf_struct(";
  out << "url=" << to_string(url);
  out << ", " << "property_type=" << to_string(property_type);
  out << ", " << "price=" << to_string(price);
  out << ", " << "nb_rooms=" << to_string(nb_rooms);
  out << ", " << "description=" << to_string(description);
  out << ", " << "images_path=" << to_string(images_path);
  out << ")";
}


