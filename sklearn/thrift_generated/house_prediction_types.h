/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef house_prediction_TYPES_H
#define house_prediction_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class PredictionResult;

typedef struct _PredictionResult__isset {
  _PredictionResult__isset() : predictedvalue(false), error(false) {}
  bool predictedvalue :1;
  bool error :1;
} _PredictionResult__isset;

class PredictionResult : public virtual ::apache::thrift::TBase {
 public:

  PredictionResult(const PredictionResult&);
  PredictionResult& operator=(const PredictionResult&);
  PredictionResult() : predictedvalue(0), error() {
  }

  virtual ~PredictionResult() throw();
  double predictedvalue;
  std::string error;

  _PredictionResult__isset __isset;

  void __set_predictedvalue(const double val);

  void __set_error(const std::string& val);

  bool operator == (const PredictionResult & rhs) const
  {
    if (!(predictedvalue == rhs.predictedvalue))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const PredictionResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PredictionResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PredictionResult &a, PredictionResult &b);

inline std::ostream& operator<<(std::ostream& out, const PredictionResult& obj)
{
  obj.printTo(out);
  return out;
}



#endif
