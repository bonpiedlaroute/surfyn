/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "dynamodb_access_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kTypeValues[] = {
  Type::NUMBER,
  Type::STRING
};
const char* _kTypeNames[] = {
  "NUMBER",
  "STRING"
};
const std::map<int, const char*> _Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTypeValues, _kTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


OperationResult::~OperationResult() throw() {
}


void OperationResult::__set_success(const bool val) {
  this->success = val;
}

void OperationResult::__set_error(const std::string& val) {
  this->error = val;
}

uint32_t OperationResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OperationResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OperationResult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OperationResult &a, OperationResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

OperationResult::OperationResult(const OperationResult& other0) {
  success = other0.success;
  error = other0.error;
  __isset = other0.__isset;
}
OperationResult& OperationResult::operator=(const OperationResult& other1) {
  success = other1.success;
  error = other1.error;
  __isset = other1.__isset;
  return *this;
}
void OperationResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OperationResult(";
  out << "success=" << to_string(success);
  out << ", " << "error=" << to_string(error);
  out << ")";
}


GetResult::~GetResult() throw() {
}


void GetResult::__set_result(const OperationResult& val) {
  this->result = val;
}

void GetResult::__set_values(const std::map<std::string, std::string> & val) {
  this->values = val;
}

uint32_t GetResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->values.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _key7;
              xfer += iprot->readString(_key7);
              std::string& _val8 = this->values[_key7];
              xfer += iprot->readString(_val8);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetResult");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->values.size()));
    std::map<std::string, std::string> ::const_iterator _iter9;
    for (_iter9 = this->values.begin(); _iter9 != this->values.end(); ++_iter9)
    {
      xfer += oprot->writeString(_iter9->first);
      xfer += oprot->writeString(_iter9->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetResult &a, GetResult &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.values, b.values);
  swap(a.__isset, b.__isset);
}

GetResult::GetResult(const GetResult& other10) {
  result = other10.result;
  values = other10.values;
  __isset = other10.__isset;
}
GetResult& GetResult::operator=(const GetResult& other11) {
  result = other11.result;
  values = other11.values;
  __isset = other11.__isset;
  return *this;
}
void GetResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetResult(";
  out << "result=" << to_string(result);
  out << ", " << "values=" << to_string(values);
  out << ")";
}


ScanReqResult::~ScanReqResult() throw() {
}


void ScanReqResult::__set_result(const OperationResult& val) {
  this->result = val;
}

void ScanReqResult::__set_values(const std::vector<std::map<std::string, std::string> > & val) {
  this->values = val;
}

void ScanReqResult::__set_scanend(const bool val) {
  this->scanend = val;
}

uint32_t ScanReqResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->values.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              {
                this->values[_i16].clear();
                uint32_t _size17;
                ::apache::thrift::protocol::TType _ktype18;
                ::apache::thrift::protocol::TType _vtype19;
                xfer += iprot->readMapBegin(_ktype18, _vtype19, _size17);
                uint32_t _i21;
                for (_i21 = 0; _i21 < _size17; ++_i21)
                {
                  std::string _key22;
                  xfer += iprot->readString(_key22);
                  std::string& _val23 = this->values[_i16][_key22];
                  xfer += iprot->readString(_val23);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->scanend);
          this->__isset.scanend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScanReqResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ScanReqResult");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->result.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->values.size()));
    std::vector<std::map<std::string, std::string> > ::const_iterator _iter24;
    for (_iter24 = this->values.begin(); _iter24 != this->values.end(); ++_iter24)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter24).size()));
        std::map<std::string, std::string> ::const_iterator _iter25;
        for (_iter25 = (*_iter24).begin(); _iter25 != (*_iter24).end(); ++_iter25)
        {
          xfer += oprot->writeString(_iter25->first);
          xfer += oprot->writeString(_iter25->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scanend", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->scanend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ScanReqResult &a, ScanReqResult &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.values, b.values);
  swap(a.scanend, b.scanend);
  swap(a.__isset, b.__isset);
}

ScanReqResult::ScanReqResult(const ScanReqResult& other26) {
  result = other26.result;
  values = other26.values;
  scanend = other26.scanend;
  __isset = other26.__isset;
}
ScanReqResult& ScanReqResult::operator=(const ScanReqResult& other27) {
  result = other27.result;
  values = other27.values;
  scanend = other27.scanend;
  __isset = other27.__isset;
  return *this;
}
void ScanReqResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScanReqResult(";
  out << "result=" << to_string(result);
  out << ", " << "values=" << to_string(values);
  out << ", " << "scanend=" << to_string(scanend);
  out << ")";
}


ValueType::~ValueType() throw() {
}


void ValueType::__set_field(const std::string& val) {
  this->field = val;
}

void ValueType::__set_fieldtype(const Type::type val) {
  this->fieldtype = val;
}

uint32_t ValueType::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field);
          this->__isset.field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          this->fieldtype = (Type::type)ecast28;
          this->__isset.fieldtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ValueType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ValueType");

  xfer += oprot->writeFieldBegin("field", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->field);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fieldtype", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->fieldtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ValueType &a, ValueType &b) {
  using ::std::swap;
  swap(a.field, b.field);
  swap(a.fieldtype, b.fieldtype);
  swap(a.__isset, b.__isset);
}

ValueType::ValueType(const ValueType& other29) {
  field = other29.field;
  fieldtype = other29.fieldtype;
  __isset = other29.__isset;
}
ValueType& ValueType::operator=(const ValueType& other30) {
  field = other30.field;
  fieldtype = other30.fieldtype;
  __isset = other30.__isset;
  return *this;
}
void ValueType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ValueType(";
  out << "field=" << to_string(field);
  out << ", " << "fieldtype=" << to_string(fieldtype);
  out << ")";
}


KeyValue::~KeyValue() throw() {
}


void KeyValue::__set_key(const std::string& val) {
  this->key = val;
}

void KeyValue::__set_value(const ValueType& val) {
  this->value = val;
}

uint32_t KeyValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KeyValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KeyValue");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeyValue &a, KeyValue &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

KeyValue::KeyValue(const KeyValue& other31) {
  key = other31.key;
  value = other31.value;
  __isset = other31.__isset;
}
KeyValue& KeyValue::operator=(const KeyValue& other32) {
  key = other32.key;
  value = other32.value;
  __isset = other32.__isset;
  return *this;
}
void KeyValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeyValue(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


