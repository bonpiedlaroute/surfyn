// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Sf_service.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <sqlite3.h>


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

int processrow(void *result, int argc, char** argv, char **colname)
{
   std::vector<Sf_struct> * _return = (std::vector<Sf_struct>*) result;

   Sf_struct value;
   int i = 0;
   if( i < argc )
      value.url = argv[i];
   
   i++;
   if( i < argc )
      value.property_type = argv[i];

   i++;
   if( i < argc )
      value.price = atoi(argv[i]);

   i++;
   if( i < argc )
      value.nb_rooms = atoi(argv[i]);

   i++;
   if( i < argc )
      value.description = argv[i];
    
   i++;
   if( i < argc )
      value.images_path = argv[i];

   _return->push_back(value);

   return 0;
}


class Sf_serviceHandler : virtual public Sf_serviceIf 
{
   private:
   int rc;
   const char* database_filename = "/var/www/html/realestate_ad.db";
   sqlite3* db;
   char* err_msg;

   public:
   Sf_serviceHandler() 
   {
   
   }

  /*
   * @brief request the table and put results in _return
   * 
   * @param std::vector<Sf_struct>& _return  contents of the table
   */
  void getproperties(std::vector<Sf_struct> & _return) 
   {
      rc = sqlite3_open(database_filename, &db);
      const char* sql = "SELECT * FROM leboncoin_ad";
      
      if( rc != SQLITE_OK )
      {
         printf("Cannot open database: %s\n",sqlite3_errmsg(db));
         sqlite3_close(db);
         return;
      }

      rc = sqlite3_exec(db, sql, processrow, (void*)(&_return), &err_msg);
      
      if( rc != SQLITE_OK )
      {
         printf("Failed to select data\n");
         printf("SQL error: %s\n", err_msg);
      
         sqlite3_free(err_msg);
         sqlite3_close(db);
         return;
      }

      sqlite3_close(db);
      printf("getproperties\n");
   }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<Sf_serviceHandler> handler(new Sf_serviceHandler());
  shared_ptr<TProcessor> processor(new Sf_serviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

