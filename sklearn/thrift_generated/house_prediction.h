/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef house_prediction_H
#define house_prediction_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "house_prediction_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class house_predictionIf {
 public:
  virtual ~house_predictionIf() {}
  virtual void getprice(PredictionResult& _return, const std::map<std::string, std::string> & house_description) = 0;
};

class house_predictionIfFactory {
 public:
  typedef house_predictionIf Handler;

  virtual ~house_predictionIfFactory() {}

  virtual house_predictionIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(house_predictionIf* /* handler */) = 0;
};

class house_predictionIfSingletonFactory : virtual public house_predictionIfFactory {
 public:
  house_predictionIfSingletonFactory(const boost::shared_ptr<house_predictionIf>& iface) : iface_(iface) {}
  virtual ~house_predictionIfSingletonFactory() {}

  virtual house_predictionIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(house_predictionIf* /* handler */) {}

 protected:
  boost::shared_ptr<house_predictionIf> iface_;
};

class house_predictionNull : virtual public house_predictionIf {
 public:
  virtual ~house_predictionNull() {}
  void getprice(PredictionResult& /* _return */, const std::map<std::string, std::string> & /* house_description */) {
    return;
  }
};

typedef struct _house_prediction_getprice_args__isset {
  _house_prediction_getprice_args__isset() : house_description(false) {}
  bool house_description :1;
} _house_prediction_getprice_args__isset;

class house_prediction_getprice_args {
 public:

  house_prediction_getprice_args(const house_prediction_getprice_args&);
  house_prediction_getprice_args& operator=(const house_prediction_getprice_args&);
  house_prediction_getprice_args() {
  }

  virtual ~house_prediction_getprice_args() throw();
  std::map<std::string, std::string>  house_description;

  _house_prediction_getprice_args__isset __isset;

  void __set_house_description(const std::map<std::string, std::string> & val);

  bool operator == (const house_prediction_getprice_args & rhs) const
  {
    if (!(house_description == rhs.house_description))
      return false;
    return true;
  }
  bool operator != (const house_prediction_getprice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const house_prediction_getprice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class house_prediction_getprice_pargs {
 public:


  virtual ~house_prediction_getprice_pargs() throw();
  const std::map<std::string, std::string> * house_description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _house_prediction_getprice_result__isset {
  _house_prediction_getprice_result__isset() : success(false) {}
  bool success :1;
} _house_prediction_getprice_result__isset;

class house_prediction_getprice_result {
 public:

  house_prediction_getprice_result(const house_prediction_getprice_result&);
  house_prediction_getprice_result& operator=(const house_prediction_getprice_result&);
  house_prediction_getprice_result() {
  }

  virtual ~house_prediction_getprice_result() throw();
  PredictionResult success;

  _house_prediction_getprice_result__isset __isset;

  void __set_success(const PredictionResult& val);

  bool operator == (const house_prediction_getprice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const house_prediction_getprice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const house_prediction_getprice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _house_prediction_getprice_presult__isset {
  _house_prediction_getprice_presult__isset() : success(false) {}
  bool success :1;
} _house_prediction_getprice_presult__isset;

class house_prediction_getprice_presult {
 public:


  virtual ~house_prediction_getprice_presult() throw();
  PredictionResult* success;

  _house_prediction_getprice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class house_predictionClient : virtual public house_predictionIf {
 public:
  house_predictionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  house_predictionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getprice(PredictionResult& _return, const std::map<std::string, std::string> & house_description);
  void send_getprice(const std::map<std::string, std::string> & house_description);
  void recv_getprice(PredictionResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class house_predictionProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<house_predictionIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (house_predictionProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getprice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  house_predictionProcessor(boost::shared_ptr<house_predictionIf> iface) :
    iface_(iface) {
    processMap_["getprice"] = &house_predictionProcessor::process_getprice;
  }

  virtual ~house_predictionProcessor() {}
};

class house_predictionProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  house_predictionProcessorFactory(const ::boost::shared_ptr< house_predictionIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< house_predictionIfFactory > handlerFactory_;
};

class house_predictionMultiface : virtual public house_predictionIf {
 public:
  house_predictionMultiface(std::vector<boost::shared_ptr<house_predictionIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~house_predictionMultiface() {}
 protected:
  std::vector<boost::shared_ptr<house_predictionIf> > ifaces_;
  house_predictionMultiface() {}
  void add(boost::shared_ptr<house_predictionIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getprice(PredictionResult& _return, const std::map<std::string, std::string> & house_description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getprice(_return, house_description);
    }
    ifaces_[i]->getprice(_return, house_description);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class house_predictionConcurrentClient : virtual public house_predictionIf {
 public:
  house_predictionConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  house_predictionConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getprice(PredictionResult& _return, const std::map<std::string, std::string> & house_description);
  int32_t send_getprice(const std::map<std::string, std::string> & house_description);
  void recv_getprice(PredictionResult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
