/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sf_services_TYPES_H
#define sf_services_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Sf_struct;

typedef struct _Sf_struct__isset {
  _Sf_struct__isset() : url(false), property_type(false), price(false), nb_rooms(false), description(false), images_path(false) {}
  bool url :1;
  bool property_type :1;
  bool price :1;
  bool nb_rooms :1;
  bool description :1;
  bool images_path :1;
} _Sf_struct__isset;

class Sf_struct {
 public:

  Sf_struct(const Sf_struct&);
  Sf_struct& operator=(const Sf_struct&);
  Sf_struct() : url(), property_type(), price(0), nb_rooms(0), description(), images_path() {
  }

  virtual ~Sf_struct() throw();
  std::string url;
  std::string property_type;
  int32_t price;
  int32_t nb_rooms;
  std::string description;
  std::string images_path;

  _Sf_struct__isset __isset;

  void __set_url(const std::string& val);

  void __set_property_type(const std::string& val);

  void __set_price(const int32_t val);

  void __set_nb_rooms(const int32_t val);

  void __set_description(const std::string& val);

  void __set_images_path(const std::string& val);

  bool operator == (const Sf_struct & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(nb_rooms == rhs.nb_rooms))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(images_path == rhs.images_path))
      return false;
    return true;
  }
  bool operator != (const Sf_struct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sf_struct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Sf_struct &a, Sf_struct &b);

inline std::ostream& operator<<(std::ostream& out, const Sf_struct& obj)
{
  obj.printTo(out);
  return out;
}



#endif
