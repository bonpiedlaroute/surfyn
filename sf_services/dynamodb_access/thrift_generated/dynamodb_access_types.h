/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dynamodb_access_TYPES_H
#define dynamodb_access_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct Type {
  enum type {
    NUMBER = 1,
    STRING = 2
  };
};

extern const std::map<int, const char*> _Type_VALUES_TO_NAMES;

class OperationResult;

class ValueType;

class KeyValue;

typedef struct _OperationResult__isset {
  _OperationResult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _OperationResult__isset;

class OperationResult : public virtual ::apache::thrift::TBase {
 public:

  OperationResult(const OperationResult&);
  OperationResult& operator=(const OperationResult&);
  OperationResult() : success(0), error() {
  }

  virtual ~OperationResult() throw();
  bool success;
  std::string error;

  _OperationResult__isset __isset;

  void __set_success(const bool val);

  void __set_error(const std::string& val);

  bool operator == (const OperationResult & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const OperationResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OperationResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OperationResult &a, OperationResult &b);

inline std::ostream& operator<<(std::ostream& out, const OperationResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ValueType__isset {
  _ValueType__isset() : field(false), fieldtype(false) {}
  bool field :1;
  bool fieldtype :1;
} _ValueType__isset;

class ValueType : public virtual ::apache::thrift::TBase {
 public:

  ValueType(const ValueType&);
  ValueType& operator=(const ValueType&);
  ValueType() : field(), fieldtype((Type::type)0) {
  }

  virtual ~ValueType() throw();
  std::string field;
  Type::type fieldtype;

  _ValueType__isset __isset;

  void __set_field(const std::string& val);

  void __set_fieldtype(const Type::type val);

  bool operator == (const ValueType & rhs) const
  {
    if (!(field == rhs.field))
      return false;
    if (!(fieldtype == rhs.fieldtype))
      return false;
    return true;
  }
  bool operator != (const ValueType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ValueType &a, ValueType &b);

inline std::ostream& operator<<(std::ostream& out, const ValueType& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _KeyValue__isset {
  _KeyValue__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _KeyValue__isset;

class KeyValue : public virtual ::apache::thrift::TBase {
 public:

  KeyValue(const KeyValue&);
  KeyValue& operator=(const KeyValue&);
  KeyValue() : key() {
  }

  virtual ~KeyValue() throw();
  std::string key;
  ValueType value;

  _KeyValue__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const ValueType& val);

  bool operator == (const KeyValue & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const KeyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyValue &a, KeyValue &b);

inline std::ostream& operator<<(std::ostream& out, const KeyValue& obj)
{
  obj.printTo(out);
  return out;
}



#endif
